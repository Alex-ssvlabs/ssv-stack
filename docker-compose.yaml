services:
  #  SSV node
  ssv-node:
    image: local.io/ssvlabs/ssv:otel-metrics2
    #image: ${SSV_IMAGE_REPOSITORY:-docker.io/ssvlabs/ssv-node}:${SSV_IMAGE_TAG:-v2.1.0}
    env_file:
      - path: ./ssv.env
        required: false
    environment:
      - PASSWORD_FILE=/data/${PASSWORD_FILE:-password}
      - PRIVATE_KEY_FILE=/data/${PRIVATE_KEY_FILE:-private_key}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - CONFIG_PATH=${CONFIG_PATH:-./config/config.example.yaml}
      - SHARE_CONFIG=${SHARE_CONFIG}
      - CONSENSUS_TYPE=${CONSENSUS_TYPE:-validation}
      - TCP_PORT=${SSV_PORT_P2P_TCP:-13001}
      - UDP_PORT=${SSV_PORT_P2P_UDP:-12001}
      - P2P_MAX_PEERS=${P2P_MAX_PEERS:-70}
      - DB_PATH=${DB_PATH:-/data/db}
      - METRICS_API_PORT=${METRICS_API_PORT:-15000}
      - NETWORK=${NETWORK:-holesky}
    ports:
      - ${SSV_PORT_P2P_TCP:-13001}:${SSV_PORT_P2P_TCP:-13001}/tcp
      - ${SSV_PORT_P2P_UDP:-12001}:${SSV_PORT_P2P_UDP:-12001}/udp
      - ${METRICS_API_PORT:-15000}:${METRICS_API_PORT:-15000}
    networks: [local-docker]
    volumes:
      - ${DATA_FOLDER:-./ssv-node-data}:/data
    restart: unless-stopped
    depends_on:
      ssv-key-generation:
        condition: service_completed_successfully
    command: make start-node

  # SSV node key generation
  # only generates a keypair if it doesnt exists and then it persists it on disk
  ssv-key-generation:
    image: local.io/ssvlabs/ssv:otel-metrics2
    #image: ${SSV_IMAGE_REPOSITORY:-docker.io/ssvlabs/ssv-node}:${SSV_IMAGE_TAG:-v2.1.0}
    env_file:
      - path: ./ssv.env
        required: false
    environment:
        - PRIVATE_KEY_FILE=/data/${PRIVATE_KEY_FILE:-private_key}
        - PASSWORD_FILE=/data/${PASSWORD_FILE:-password}
    command: /bin/bash -c '
      set -e;
      if [ -f $${PRIVATE_KEY_FILE} ]; then 
      echo "private key already exists, skipping generation.";
      else 
      if [ ! -f $${PASSWORD_FILE} ]; then 
      echo "Password file doesnt exists, generating random password file";
      echo $$(openssl rand -base64 32) > $${PASSWORD_FILE};
      fi;
      /go/bin/ssvnode generate-operator-keys --password-file=$${PASSWORD_FILE};
      cp ./encrypted_private_key.json $${PRIVATE_KEY_FILE};
      echo "Generated a new private key";
      echo "Backup the password file $${PASSWORD_FILE} and the private key file $${PRIVATE_KEY_FILE} to separate device!!!";
      fi'
    volumes:
      - type: bind
        source: ${DATA_FOLDER:-./ssv-node-data}
        target: /data
        bind:
          create_host_path: true

  #                        _ _             _
  #  _ __ ___   ___  _ __ (_) |_ ___  _ __(_)_ __   __ _
  # | '_ ` _ \ / _ \| '_ \| | __/ _ \| '__| | '_ \ / _` |
  # | | | | | | (_) | | | | | || (_) | |  | | | | | (_| |
  # |_| |_| |_|\___/|_| |_|_|\__\___/|_|  |_|_| |_|\__, |
  #                                                |___/
  prometheus:
    image: docker.io/prom/prometheus:${PROMETHEUS_VERSION:-latest}
    user: ":"
    networks: [local-docker]
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - "127.0.0.1:9090:9090" # Expose Prometheus on 127.0.0.1:9090
    volumes:
      - type: bind
        source: ${PROMETHEUS_DATA_FOLDER:-./prometheus-data}
        target: /prometheus
        bind:
          create_host_path: true
      - ./prometheus/prometheus-config.yml:/etc/prometheus/prometheus.yml
    restart: unless-stopped
    depends_on:
      - ssv-node

  grafana:
    image: docker.io/grafana/grafana:latest
    user: ":"
    networks:
      - local-docker
    ports:
      - "127.0.0.1:3000:3000" # Expose Grafana on 127.0.0.1:3000
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_AUTH_ANONYMOUS_ENABLED=true # Optional: enable anonymous access
    volumes:
      - type: bind
        source: ${GRAFANA_DATA_FOLDER:-./grafana-data}
        target: /var/lib/grafana
        bind:
          create_host_path: true
      - ./grafana:/etc/grafana/provisioning # Load custom dashboards and data sources
      - ./ssv-grafana-dashboard:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    restart: always

networks:
  local-docker:
    driver: bridge